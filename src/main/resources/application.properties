spring.application.name=incidentes
# Server configuration
server.port=8080

# Database configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/incidentes_db
spring.datasource.username=postgres
spring.datasource.password=123456

# Hibernate/JPA configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.org.springframework=INFO
logging.level.com.institution.incidentes=DEBUG
spring.datasource.driver-class-name=org.postgresql.Driver


spring.web.resources.add-mappings=false
#

# Agregamos la configuracion para la conexion con redis
#spring.cache.type=redis
#spring.redis.host=localhost
#spring.redis.port=6379

# Configuración de Spring Session
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.timeout=30m


# Configuración JWT
# Clave secreta utilizada para firmar los tokens JWT
# Esta clave debe ser lo suficientemente larga y compleja para garantizar la seguridad
# del token. En un entorno de producción, se recomienda utilizar una clave generada aleatoriamente y almacenarla de forma segura.
# En este caso, se utiliza una clave de ejemplo, pero en un entorno real, se debe cambiar por una clave segura.
app.jwtSecret=QWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNM
#1 día en milisegundos
app.jwtExpirationMs=86400000


# Permitir CORS para desarrollo
# Permitir CORS para localhost y el puerto 3000
# Permitir CORS para localhost y el puerto 5500
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:5500
# Configuración de CORS
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS 
# Permitir todos los encabezados
spring.web.cors.allowed-headers=*
# Permitir credenciales (cookies, autenticación HTTP básica, etc.)
spring.web.cors.allow-credentials=true


